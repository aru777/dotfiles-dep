#
# Modified version of steeef prompt that isn't so slow on large git repositories
#
# Authors:
#   Steve Losh <steve@stevelosh.com>
#   Bart Trojanowski <bart@jukie.net>
#   Brian Carper <brian@carper.ca>
#   steeef <steeef@gmail.com>
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Screenshots:
#   http://i.imgur.com/HyRvv.png
#

function prompt_brm_precmd {
  branch_format="(${_prompt_brm_colors[1]}%b%f%u%c)"

  zstyle ':vcs_info:*:prompt:*' formats "${branch_format}"

  vcs_info 'prompt'

  if (( $+functions[python-info] )); then
    python-info
  fi
}

function prompt_brm_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz colors && colors
  [[ -z $(functions zsh/terminfo) ]] && autoload -Uz zsh/terminfo
  autoload -Uz vcs_info

  # Use extended color pallete if available.
  if [[ "$terminfo[colors]" -ge 8 ]]; then
    _prompt_brm_colors=(
      "%F{81}"  # Turquoise
      "%F{166}" # Orange
      "%F{135}" # Purple
      "%F{161}" # Hotpink
      "%F{118}" # Limegreen
    )
  else
    _prompt_brm_colors=(
      "%F{cyan}"
      "%F{yellow}"
      "%F{magenta}"
      "%F{red}"
      "%F{green}"
    )
  fi

  # Formats:
  #   %b - branchname
  #   %u - unstagedstr (see below)
  #   %c - stagedstr (see below)
  #   %a - action (e.g. rebase-i)
  #   %R - repository path
  #   %S - path in the repository
  local branch_format="(${_prompt_brm_colors[1]}%b%f%u%c)"
  local action_format="(${_prompt_brm_colors[5]}%a%f)"
  local unstaged_format="${_prompt_brm_colors[2]}●%f"
  local staged_format="${_prompt_brm_colors[5]}●%f"

  # Set vcs_info parameters.
  zstyle ':vcs_info:*' enable git hg
  zstyle ':vcs_info:hg*:prompt:*' get-bookmarks true
  zstyle ':vcs_info:hg*:prompt:*' get-revision true
  zstyle ':vcs_info:hg*:prompt:*' use-simple true
  if (( $+functions[estyle-cfc] )) ; then
    zstyle -e ':vcs_info:*:prompt:*' check-for-changes \
      'estyle-cfc && reply=( true ) || reply=( false )'
  else
    zstyle ':vcs_info:*:prompt:*' check-for-changes true
  fi
  zstyle ':vcs_info:hg*+gen-hg-bookmark-string:prompt:*' hooks hgbookmarks
  zstyle ':vcs_info:*:prompt:*' unstagedstr "${unstaged_format}"
  zstyle ':vcs_info:*:prompt:*' stagedstr "${staged_format}"
  zstyle ':vcs_info:*:prompt:*' actionformats "${branch_format}${action_format}"
  zstyle ':vcs_info:*:prompt:*' formats "${branch_format}"
  zstyle ':vcs_info:*:prompt:*' nvcsformats   ""

  # Set python-info parameters.
  zstyle ':prezto:module:python:info:virtualenv' format '(%v)'

  # Add hook for calling vcs_info before each command.
  add-zsh-hook precmd prompt_brm_precmd

  # Define prompts.
  PROMPT="
${_prompt_brm_colors[3]}%n%f at ${_prompt_brm_colors[2]}%m%f in ${_prompt_brm_colors[5]}%~%f "'${vcs_info_msg_0_}'"
"'$python_info[virtualenv]'"$ "
  RPROMPT=''
}

function +vi-hgbookmarks() {
  local s i
# The bookmarks returned by `hg' are available in
# the functions positional parameters.
  for i in "$@"; do
# I frequently use hg-git, which creates a master bookmark, I'd prefer for that to be ignored
    if [[ $i != "master" ]]; then
      [[ -n $s ]] && s=$s,
      s=${s}$i
    fi
  done
# tiny styling tweak when bookmark exists
  [[ -n $s ]] && s=/$s
  hook_com[hg-bookmark-string]=$s
  ret=1
  return 0
}

prompt_brm_setup "$@"
